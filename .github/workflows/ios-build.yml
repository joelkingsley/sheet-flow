# iOS Build and Archive Workflow
#
# SETUP REQUIRED:
# 
# 1. Repository Secrets (Settings > Secrets and variables > Actions > Secrets):
#    - NPM_TOKEN: Personal Access Token for GitHub Package Registry (with packages:read permission)
#    - BUILD_CERTIFICATE_BASE64: Base64 encoded .p12 certificate file
#    - P12_PASSWORD: Password for the .p12 certificate
#    - BUILD_PROVISION_PROFILE_BASE64: Base64 encoded .mobileprovision file
#    - KEYCHAIN_PASSWORD: Any password for temporary keychain (e.g., "temppassword123")
#    - APPLE_ID_PASSWORD: App-specific password for Apple ID
#
# 2. Repository Variables (Settings > Secrets and variables > Actions > Variables):
#    - APPLE_TEAM_ID: Your Apple Developer Team ID (found in Apple Developer Account)
#    - APPLE_ID: Your Apple ID email address
#
# 3. How to generate certificates and provisioning profiles:
#    a) Generate .p12 certificate:
#       - Export your iOS Distribution certificate from Keychain Access as .p12
#       - Convert to base64: `base64 -i certificate.p12 | pbcopy`
#    b) Generate .mobileprovision:
#       - Download App Store Distribution provisioning profile from Apple Developer Portal
#       - Convert to base64: `base64 -i profile.mobileprovision | pbcopy`
#
# 4. Apple ID App-Specific Password:
#    - Go to appleid.apple.com > Sign-In and Security > App-Specific Passwords
#    - Generate a new password for "GitHub Actions"

name: iOS Build and Archive

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ios:
    name: Build and Archive iOS App
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        registry-url: 'https://npm.pkg.github.com'
        
    - name: Configure npm for GitHub Package Registry
      run: |
        echo "@joelkingsley:registry=https://npm.pkg.github.com" >> .npmrc
        echo "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_TOKEN }}" >> .npmrc
        
    - name: Setup Ruby for CocoaPods
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Expo CLI
      run: npm install -g @expo/cli
      
    - name: Prebuild iOS project
      run: npx expo prebuild --platform ios --clean
      
    - name: Install CocoaPods dependencies
      run: |
        cd ios
        pod install
        
    - name: Setup Xcode version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.4'
        
    - name: Configure Xcode project for code signing
      env:
        APPLE_TEAM_ID: ${{ vars.APPLE_TEAM_ID }}
        HAS_CERTIFICATES: ${{ secrets.BUILD_CERTIFICATE_BASE64 != '' }}
      run: |
        cd ios
        
        echo "Configuring code signing for SheetFlow project..."
        
        # First, remove old CODE_SIGN_IDENTITY that uses deprecated "iPhone Developer"
        sed -i '' '/CODE_SIGN_IDENTITY\[sdk=iphoneos\*\]/d' SheetFlow.xcodeproj/project.pbxproj
        
        # Create a script to add signing configuration to target builds
        cat > add_signing.sh << 'EOF'
        #!/bin/bash
        # Add CODE_SIGN_STYLE, DEVELOPMENT_TEAM, and other signing settings after CODE_SIGN_ENTITLEMENTS lines
        temp_file=$(mktemp)
        while IFS= read -r line; do
          echo "$line" >> "$temp_file"
          if [[ $line == *"CODE_SIGN_ENTITLEMENTS = SheetFlow/SheetFlow.entitlements;"* ]]; then
            echo -e "\t\t\t\tCODE_SIGN_STYLE = Automatic;" >> "$temp_file"
            echo -e "\t\t\t\tDEVELOPMENT_TEAM = \"\";" >> "$temp_file"
            echo -e "\t\t\t\tPROVISIONING_PROFILE_SPECIFIER = \"\";" >> "$temp_file"
          fi
        done < SheetFlow.xcodeproj/project.pbxproj
        mv "$temp_file" SheetFlow.xcodeproj/project.pbxproj
        EOF
        
        chmod +x add_signing.sh
        ./add_signing.sh
        rm add_signing.sh
        
        if [ "$HAS_CERTIFICATES" = "true" ] && [ -n "$APPLE_TEAM_ID" ]; then
          echo "Configuring manual code signing with team ID: $APPLE_TEAM_ID"
          
          # Update project.pbxproj to set DEVELOPMENT_TEAM
          sed -i '' "s/DEVELOPMENT_TEAM = \"\";/DEVELOPMENT_TEAM = \"$APPLE_TEAM_ID\";/g" SheetFlow.xcodeproj/project.pbxproj
          
          # Set code signing style to manual for manual certificate management
          sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' SheetFlow.xcodeproj/project.pbxproj
          
          # Set provisioning profile specifier
          sed -i '' 's/PROVISIONING_PROFILE_SPECIFIER = "";/PROVISIONING_PROFILE_SPECIFIER = "SheetFlow";/g' SheetFlow.xcodeproj/project.pbxproj
          
          # Add CODE_SIGN_IDENTITY for Distribution certificate to both Debug and Release
          cat > add_identity.sh << 'IDENTITY_EOF'
        #!/bin/bash
        temp_file=$(mktemp)
        while IFS= read -r line; do
          echo "$line" >> "$temp_file"
          if [[ $line == *"CODE_SIGN_ENTITLEMENTS = SheetFlow/SheetFlow.entitlements;"* ]]; then
            echo -e "\t\t\t\tCODE_SIGN_IDENTITY = \"iPhone Distribution\";" >> "$temp_file"
          fi
        done < SheetFlow.xcodeproj/project.pbxproj
        mv "$temp_file" SheetFlow.xcodeproj/project.pbxproj
        IDENTITY_EOF
          chmod +x add_identity.sh
          ./add_identity.sh
          rm add_identity.sh
          
          echo "Configured for Distribution certificate with manual provisioning"
        else
          echo "⚠️  Using automatic code signing (certificates not configured)"
          # For automatic signing, ensure team ID is set
          if [ -n "$APPLE_TEAM_ID" ]; then
            sed -i '' "s/DEVELOPMENT_TEAM = \"\";/DEVELOPMENT_TEAM = \"$APPLE_TEAM_ID\";/g" SheetFlow.xcodeproj/project.pbxproj
          fi
        fi
        
        # Show current configuration
        echo "Current code signing configuration:"
        grep -n "DEVELOPMENT_TEAM\|CODE_SIGN_STYLE\|PROVISIONING_PROFILE_SPECIFIER\|CODE_SIGN_IDENTITY" SheetFlow.xcodeproj/project.pbxproj | head -15 || echo "Configuration not found"
        
    - name: Import certificates and provisioning profiles (if available)
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        APPLE_TEAM_ID: ${{ vars.APPLE_TEAM_ID }}
      run: |
        # Only proceed if we have certificates
        if [ -z "$BUILD_CERTIFICATE_BASE64" ]; then
          echo "⚠️  No certificates configured - skipping certificate import"
          echo "   To enable certificate-based signing, configure the following secrets:"
          echo "   - BUILD_CERTIFICATE_BASE64"
          echo "   - P12_PASSWORD" 
          echo "   - BUILD_PROVISION_PROFILE_BASE64"
          echo "   - KEYCHAIN_PASSWORD"
          exit 0
        fi
        
        echo "📜 Importing certificates and provisioning profiles..."
        
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # Import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        
        echo "✅ Certificates and provisioning profiles imported successfully"
        
    - name: Build iOS app
      run: |
        cd ios
        xcodebuild -workspace SheetFlow.xcworkspace \
          -scheme SheetFlow \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath $RUNNER_TEMP/SheetFlow.xcarchive \
          archive
          
    - name: Export IPA
      run: |
        # Create export options plist
        cat > $RUNNER_TEMP/ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>method</key>
          <string>app-store-connect</string>
          <key>teamID</key>
          <string>\${{ vars.APPLE_TEAM_ID }}</string>
          <key>provisioningProfiles</key>
          <dict>
            <key>com.joelkingsleyr.sheetflow</key>
            <string>SheetFlow</string>
          </dict>
          <key>uploadBitcode</key>
          <false/>
          <key>uploadSymbols</key>
          <true/>
          <key>compileBitcode</key>
          <false/>
        </dict>
        </plist>
        EOF
        
        # Export archive to IPA
        xcodebuild -exportArchive \
          -archivePath $RUNNER_TEMP/SheetFlow.xcarchive \
          -exportOptionsPlist $RUNNER_TEMP/ExportOptions.plist \
          -exportPath $RUNNER_TEMP/export
          
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: SheetFlow-iOS
        path: ${{ runner.temp }}/export/SheetFlow.ipa
        retention-days: 30
        
    - name: Upload dSYM artifact
      uses: actions/upload-artifact@v4
      with:
        name: SheetFlow-dSYM
        path: ${{ runner.temp }}/export/SheetFlow.app.dSYM.zip
        retention-days: 30
        
    - name: Upload to TestFlight (Optional)
      if: github.ref == 'refs/heads/main'
      env:
        APPLE_ID: ${{ vars.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_TEAM_ID: ${{ vars.APPLE_TEAM_ID }}
      run: |
        xcrun altool --upload-app \
          --type ios \
          --file $RUNNER_TEMP/export/SheetFlow.ipa \
          --username "$APPLE_ID" \
          --password "$APPLE_ID_PASSWORD" \
          --asc-provider "$APPLE_TEAM_ID"
          
    - name: Clean up keychain and provisioning profile
      if: ${{ always() }}
      run: |
        # Clean up keychain (ignore errors if it doesn't exist)
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
        # Clean up provisioning profile (ignore errors if it doesn't exist)  
        rm -f ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision || true
